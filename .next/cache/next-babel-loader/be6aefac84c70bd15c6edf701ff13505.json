{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\AKIRA\\\\Desktop\\\\web-demo\\\\Project\\\\Frontend-next-js-V1\\\\src\\\\components\\\\RequestResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport Loader from 'react-loader-spinner';\nimport Modal from './modal/Modal';\nimport { FormContainer, Header, StyledForm, InputContainer, Input, Button, StyledError, StyledInform } from './SignUp';\nimport { REQUEST_TO_RESET_PASSWORD } from '../apollo/mutations';\n\nvar RequestResetPassword = function RequestResetPassword() {\n  _s();\n\n  var _error$graphQLErrors$, _data$requestResetPas;\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var _useMutation = useMutation(REQUEST_TO_RESET_PASSWORD),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      requestResetPassword = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      data = _useMutation2$.data,\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  var handleRequestResetPassword = handleSubmit( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var email;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              email = _ref.email;\n              _context.next = 3;\n              return requestResetPassword({\n                variables: {\n                  email: email\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  return __jsx(Modal, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(FormContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"Enter your email below to reset password.\")), __jsx(StyledForm, {\n    onSubmit: handleRequestResetPassword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, __jsx(InputContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    name: \"email\",\n    id: \"email\",\n    placeholder: \"Your email\",\n    autoComplete: \"new-password\",\n    ref: register({\n      required: 'Email is required.',\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: 'Email is in wrong format.'\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(ErrorMessage, {\n    errors: errors,\n    name: \"email\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, function (_ref3) {\n    var message = _ref3.message;\n    return __jsx(StyledError, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 33\n      }\n    }, message);\n  })), __jsx(Button, {\n    disabled: loading,\n    style: {\n      cursor: loading ? 'not-allowed' : 'pointer'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, loading ? __jsx(Loader, {\n    type: \"Oval\",\n    color: \"white\",\n    height: 30,\n    width: 30,\n    timeout: 30000,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }) : 'Submit'), error && __jsx(StyledError, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, ((_error$graphQLErrors$ = error.graphQLErrors[0]) === null || _error$graphQLErrors$ === void 0 ? void 0 : _error$graphQLErrors$.message) || 'Sorry, something went wrong')), data && __jsx(StyledInform, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, (_data$requestResetPas = data.requestResetPassword) === null || _data$requestResetPas === void 0 ? void 0 : _data$requestResetPas.message))));\n};\n\n_s(RequestResetPassword, \"0UdKqW1ckbQC6DUIEGDkMYjPO3o=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = RequestResetPassword;\nexport default RequestResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequestResetPassword\");","map":{"version":3,"sources":["C:/Users/AKIRA/Desktop/web-demo/Project/Frontend-next-js-V1/src/components/RequestResetPassword.tsx"],"names":["React","useMutation","useForm","ErrorMessage","Loader","Modal","FormContainer","Header","StyledForm","InputContainer","Input","Button","StyledError","StyledInform","REQUEST_TO_RESET_PASSWORD","RequestResetPassword","register","handleSubmit","errors","requestResetPassword","data","loading","error","handleRequestResetPassword","email","variables","required","pattern","value","message","cursor","graphQLErrors"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { useForm, ErrorMessage } from 'react-hook-form'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport Modal from './modal/Modal'\r\nimport {\r\n  FormContainer,\r\n  Header,\r\n  StyledForm,\r\n  InputContainer,\r\n  Input,\r\n  Button,\r\n  StyledError,\r\n  StyledInform,\r\n} from './SignUp'\r\nimport { REQUEST_TO_RESET_PASSWORD } from '../apollo/mutations'\r\n\r\ninterface Props {}\r\n\r\nconst RequestResetPassword: React.FC<Props> = () => {\r\n  const { register, handleSubmit, errors } = useForm<{ email: string }>()\r\n\r\n  const [requestResetPassword, { data, loading, error }] = useMutation<\r\n    { requestResetPassword: { message: string } },\r\n    { email: string }\r\n  >(REQUEST_TO_RESET_PASSWORD)\r\n\r\n  const handleRequestResetPassword = handleSubmit(async ({ email }) => {\r\n    await requestResetPassword({ variables: { email } })\r\n  })\r\n\r\n  return (\r\n    <Modal>\r\n      <FormContainer>\r\n        <Header>\r\n          <h4>Enter your email below to reset password.</h4>\r\n        </Header>\r\n\r\n        <StyledForm onSubmit={handleRequestResetPassword}>\r\n          <InputContainer>\r\n            <Input\r\n              type='text'\r\n              name='email'\r\n              id='email'\r\n              placeholder='Your email'\r\n              autoComplete='new-password'\r\n              ref={register({\r\n                required: 'Email is required.',\r\n                pattern: {\r\n                  value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                  message: 'Email is in wrong format.',\r\n                },\r\n              })}\r\n            />\r\n\r\n            <ErrorMessage errors={errors} name='email'>\r\n              {({ message }) => <StyledError>{message}</StyledError>}\r\n            </ErrorMessage>\r\n          </InputContainer>\r\n\r\n          <Button\r\n            disabled={loading}\r\n            style={{ cursor: loading ? 'not-allowed' : 'pointer' }}\r\n          >\r\n            {loading ? (\r\n              <Loader\r\n                type='Oval'\r\n                color='white'\r\n                height={30}\r\n                width={30}\r\n                timeout={30000}\r\n              />\r\n            ) : (\r\n              'Submit'\r\n            )}\r\n          </Button>\r\n\r\n          {error && (\r\n            <StyledError>\r\n              {error.graphQLErrors[0]?.message || 'Sorry, something went wrong'}\r\n            </StyledError>\r\n          )}\r\n        </StyledForm>\r\n\r\n        {data && (\r\n          <StyledInform>\r\n            <p>{data.requestResetPassword?.message}</p>\r\n          </StyledInform>\r\n        )}\r\n      </FormContainer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default RequestResetPassword\r\n"]},"metadata":{},"sourceType":"module"}